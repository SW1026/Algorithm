<벨만 포드 알고리즘>
1. 출발 노드 설정
2. 최단 거리 테이블 초기화
3. N-1 번의 과정 반복[edge-relaxaion]
  1) 전체 간선 E개를 하나 씩 확인
  2) 각 간선을 거쳐, 다른 노드로 가는 비용을 계산 후 출발 노드로부터의 최단 거리 테이블 갱신
  
4. 만약 negative cycle 이 발생한다면, 3번의 과정을 1번 더 반복 했을 때 최단 거리 테이블의 값이 갱신된다.
  (어느 하나의 간선이라도)
  
=> 이를 위해 코드 설계 : n번의 라운드 반복을 한 후, n번째 갱신이 되는 값이 있으면 negative cycle 이 있는 것으로 간주

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

<negative cycle 에 관한 것>
다익스트라 알고리즘(Dijkstra’s algorithm)과 달리 벨만-포드 알고리즘은 가중치가 음수인 경우에도 적용 가능
그러나 음수 가중치가 사이클(cycle)을 이루고 있는 경우에는 작동하지 않음 - 계속 음수로 갱신되므로
=> 모든 n-1번째 라운드 이후에도 값이 업데이트가 된다면, return false 로 처리함.

dijkstra : O(|V|^2)
Bellman-Ford's algorithm : O(|V|^3), 음수 edge 가능

- RIP Protocol 에 사용 (AS 내의 라우팅테이블 갱신)

참고 : https://ratsgo.github.io/data%20structure&algorithm/2017/11/27/bellmanford/
